-- Failed query:
-- /*
-- In Neon, databases are stored on branches. By default, a project has one branch and one database.
-- You can select the branch and database to use from the drop-down menus above.
-- 
-- Try generating sample data and querying it by running the example statements below, or click
-- New Query to clear the editor.
-- */
CREATE TABLE IF NOT EXISTS workers (
    worker_id TEXT PRIMARY KEY,                       -- unique worker identifier (UUID)
    api_key TEXT UNIQUE NOT NULL,                     -- unique API key per worker
    -- system metrics
    cpu_usage NUMERIC(5,2) DEFAULT 0,                           -- overall CPU usage (%)
    ram_usage NUMERIC(5,2) DEFAULT 0,                           -- RAM usage (%)
    disk_name TEXT DEFAULT 0,                                   -- disk identifier (e.g., /dev/sda6)
    disk_usage NUMERIC(5,2) DEFAULT 0,                          -- usage percentage of largest disk
    net_in BIGINT DEFAULT 0,                                    -- total network bytes in
    net_out BIGINT DEFAULT 0,                                   -- total network bytes out
    public_ip INET,
    created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,    -- creation timestamp
    last_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,  -- last update timestamp
    queue INTEGER NOT NULL DEFAULT 0,                                      -- queue number
    has_restarted BOOL DEFAULT TRUE
);

CREATE TABLE IF NOT EXISTS noredirect (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,               -- unique identifier for each record
    unresolved_url TEXT NOT NULL,        -- original URL before resolution
    scraped_at TIMESTAMPTZ NOT NULL,     -- when the page was scraped
    worker_id TEXT                       -- references the worker that scraped it
);

CREATE TABLE IF NOT EXISTS scraped_pages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,               -- unique identifier for each record
    unresolved_url TEXT NOT NULL,        -- original URL before resolution
    resolved_url TEXT,                   -- final resolved URL
    title TEXT,                          -- page title (can be long)
    short_description TEXT,              -- short summary
    full_text_blob TEXT,                 -- full scraped page text
    scraped_at TIMESTAMPTZ NOT NULL,     -- when the page was scraped
    worker_id TEXT                       -- references the worker that scraped it
);

CREATE TABLE IF NOT EXISTS lastcount (
    service TEXT PRIMARY KEY,
    last_index INTEGER NOT NULL DEFAULT 0
);

INSERT INTO lastcount (service, last_index) VALUES ('bitly', 0);
INSERT INTO lastcount (service, last_index) VALUES ('shorturl', 0);
INSERT INTO lastcount (service, last_index) VALUES ('sid', 0);

CREATE TABLE IF NOT EXISTS statistics (
    stat_type TEXT PRIMARY KEY,
    percentage DECIMAL(5, 2),
    count INTEGER,
    change_value DECIMAL(10, 2)
);

-- Insert all statistics data
INSERT INTO statistics (stat_type, percentage, count, change_value) VALUES
('url_failures', 0, 0, 0),
('data_size', NULL, 0, 0), -- Storing data size in MB (3700 MB = 3.7 GB)
('avg_response_time', NULL, 0, 0),
('queue_size', NULL, 0, 0),
('active_workers', 0, 0, NULL), -- 12 out of 15 workers active
('total_workers', NULL, 0, NULL),
('url_not_found', 0, 0, NULL),
('total_url', NULL, 0, NULL),
('scraped_pages', NULL, 0, 0),
('redirect_failed', 0, 0, NULL);

CREATE TABLE IF NOT EXISTS task_queue (
    task_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    worker_id TEXT NULL,
    unresolved_url TEXT,
    assigned_at TIMESTAMP NULL
);

CREATE TABLE IF NOT EXISTS scraper_admin (
    username TEXT,
    password_hash TEXT,
    key1 TEXT,
    key2 TEXT,
    key3 TEXT
);

CREATE TABLE IF NOT EXISTS statefull (
    state_type TEXT PRIMARY KEY,
    state BOOL,
    value INTEGER
);

INSERT INTO statefull (state_type, state, value) VALUES ('worker_hold', false, NULL);
INSERT INTO statefull (state_type, state, value) VALUES ('queue_hold', false, NULL);
INSERT INTO statefull (state_type, state, value) VALUES ('delay', false, 0);

CREATE TABLE IF NOT EXISTS big_queue (
    task_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    worker_id TEXT NULL,
    unresolved_url TEXT,
    assigned_at TIMESTAMP NULL
);
